Fenwick Tree (also called Binary Indexed Tree)
Effecient and very simple to code.

Outline
    1. Discussion and Examples
        1.1 Data Structure motivation.
        1.2 What is a Fenwick Tree?
        1.3 Complexity Analysis
    2. Implementation Details
        2.1 Range Query
        2.2 Point Updates
        2.3 Fenwick Tree Construction
    3. Code Implementation


Data Strucutre Motivation:
    Given an array of integer values, compute the range sum between index[i, j)
    5 -3 6 1 0 -4 11 6 2 7
        If you were to add all of these intuitively, you get linear time, (BAD)
    If you use a fenwick tree and calculate prefix sums, you get constant time (VERY GOOD)

    Prefix sums: An array of the sums of different combinations of elements from the first array.
    Prefix Sums Array: You create a new array where each element is the sum of all elements from 
    the start of the original array up to that point. For our example, the prefix sums array would be:

        First element: 3 (just the first element itself)
        Second element: 3 + 5 = 8 (sum of first and second elements)
        Third element: 3 + 5 + 2 = 10 (sum of first three elements)
        Fourth element: 3 + 5 + 2 + 7 = 17 (sum of first four elements)
        Fifth element: 3 + 5 + 2 + 7 + 9 = 26 (sum of all five elements)
        So, the prefix sums array is [3, 8, 10, 17, 26].
    
    Question: WHat about if we want to update our intial array with some new value?
    Answer: A prefix sum array is great for static arrays, but takes O(n) for updates.

    Fenwick Tree: Also Called Binary Indexed Tree, is a data strucutre that supports sum range queuries as well as
    setting values in a static array and getting the value of the prefix sum up some index effeciently

Time ComplexitY:
    Construction: O(n)
    Point UPdate: O(log(n))
    Range Sum: O(log(n))
    Range Update: O(log(n))
    Adding Index: N/a
    Removing Index: N/A

Unlike a regular array, in a Fenwick tree, a specific cell is responsible for other cells as well.
The position of the least significant bit LSB determines the range of responsibility that cel has to the cells below itself.
Index 12 in binary is 1100 LSB is at posoition 3, so this index is resp[onsibile for 2^3-1 = 4 cells below itself]