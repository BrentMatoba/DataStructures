Fenwick Tree (also called Binary Indexed Tree)
Effecient and very simple to code.

Outline
    1. Discussion and Examples
        1.1 Data Structure motivation.
        1.2 What is a Fenwick Tree?
        1.3 Complexity Analysis
    2. Implementation Details
        2.1 Range Query
        2.2 Point Updates
        2.3 Fenwick Tree Construction
    3. Code Implementation


Data Strucutre Motivation:
    Given an array of integer values, compute the range sum between index[i, j)
    5 -3 6 1 0 -4 11 6 2 7
        If you were to add all of these intuitively, you get linear time, (BAD)
    If you use a fenwick tree and calculate prefix sums, you get constant time (VERY GOOD)

    Prefix sums: An array of the sums of different combinations of elements from the first array.
    Prefix Sums Array: You create a new array where each element is the sum of all elements from 
    the start of the original array up to that point. For our example, the prefix sums array would be:

        First element: 3 (just the first element itself)
        Second element: 3 + 5 = 8 (sum of first and second elements)
        Third element: 3 + 5 + 2 = 10 (sum of first three elements)
        Fourth element: 3 + 5 + 2 + 7 = 17 (sum of first four elements)
        Fifth element: 3 + 5 + 2 + 7 + 9 = 26 (sum of all five elements)
        So, the prefix sums array is [3, 8, 10, 17, 26].
    
    Question: WHat about if we want to update our intial array with some new value?
    Answer: A prefix sum array is great for static arrays, but takes O(n) for updates.

    Fenwick Tree: Also Called Binary Indexed Tree, is a data strucutre that supports sum range queuries as well as
    setting values in a static array and getting the value of the prefix sum up some index effeciently

Time ComplexitY:
    Construction: O(n)
    Point UPdate: O(log(n))
    Range Sum: O(log(n))
    Range Update: O(log(n))
    Adding Index: N/a
    Removing Index: N/A

Unlike a regular array, in a Fenwick tree, a specific cell is responsible for other cells as well.
The position of the least significant bit LSB determines the range of responsibility that cel has to the cells below itself.
Index 12 in binary is 1100 LSB is at posoition 3, so this index is resp[onsibile for 2^3-1 = 4 cells below itself]

Range of responsibility: the specific subset of elements that each node in the tree is responsible for.
 In a Fenwick tree, each node represents the cumulative total of a range of elements from an underlying array. 
 The range of responsibility for each node is determined by its position in the tree and is used to efficiently 
 compute prefix sums and update values in the array.

    All odd numbers have their first least significant bit set in the oens position, so they are only responsible for themselves.

Range Queries:
    In a fenwick tree, we may compute the prefix sum up to a certian index, which ultimately l,ets us perform range sum queries.
Idea: Suppose you want to find the prefix sum [1,i] then you start at i and cascade downwards until you reach zero adding the value at each
of the indices you encounter

Range Query Algorithm
    To do a range query from [i, j] both inclusisive a fenwick tree of Size N:
        fucniton prefixSum(i):
            sum = 0
            while i != 0
                sum = sum + tree[i]
                i = i - LSB(i)
            return sum
        function rangeQuery(i,j):
            return prefixSum(j) - prefixSUm(i-1)
            Where LSB returns the value oft he least significant bit.

Point Update:
    INstead of querying a range to find hte inteval sum we want to update a cell in our array.
    Recall that with range queries we cascaded downf orm the current idnex by continuously removing the least significant bit
    Point updates are the opposite of this, we want to add the LSB to propogate the value up to tghe cells responsibole for us.


1.Start with the index where you want to make the update. Increase the value at this index by the amount you want to update.
2.Move to the next index that needs to be updated. This is calculated by taking the current index and adding to it the rightmost set bit in its binary representation.
3.Repeat step 2 until you reach an index that is outside the range of the tree (greater than the size of the tree).
In this way, a Fenwick Tree efficiently updates the values while maintaining the ability to quickly compute prefix sums.

Point update algorithm
To update the cell at index i int he Fenwick tree of size N:
    function add(i, x):
        while i< N:
        tree[i] = tree[i] + x
        i = i + LBS(i)
    
    Where LSB returns the value of the least significant bit.
    For exmaple:
        LSB(12) = 4 because 12^10 = 1100^2 and the least significant bit of 1100^2 is 10^2, or 4 in base ten


    


Fenwick Tree Construction:
    Naive Construciton:
        Let A be an array of values. For each element in A at index i do a point update on the Fenwick tree with a vlaue of A[i]
        There are n elements and each point update takes O(log(n)) for a total of O(nlog(n)), can we do better?
    Linear Construction:
        Input values we wish to turn into a legitimate Fenwick Tree.
        Idea; Add tehv alue in the current cell to the immediate cellt hat is responsible for us. This resembles what we did for 
        point updates but only one cell at a time.

        This will make the "cascading" effect in range queries possible by propogating the value in each cell throughout the tree.

    