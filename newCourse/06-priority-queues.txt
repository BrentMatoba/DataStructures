Priority Queues (PQs) with an interlude on heaps

Outline:
    1. Discussion and examples of PQ's
        1.1 What is a PQ?
        1.2 What is a heap?
        1.3 When and where is a PQ used?
        1.4 How to turn a min priority queue into a max priority queue.
        1.5 Complexity Analysis.
    2. Binary heap priority queue implementation details.
        2.1 Heap sinking and swimming (also called sift down/sift up or bubble up/bubble down)
        2.2 Adding eleemnts to priority queue.
        2.3 Removing (polling) eleemnts from priority queue.
    3. Code Implementation


1. Priority Queue Discussion and examples
    1.1 What is a Priority Queue?
        A priority queue is an Abstract Data Type (ADT) that operates similar to a normal queue 
        except that EACH ELEMENT HAS A CERTAIN PRIORITY. The priority of the elements in the 
        priority queue determine the order in which elements are removed from the priority queue.   

        *NOTE: Priority queues only support COMPARABLE data, meaning that the data inserted into the
        priority queue must be able to be ordered in some way either from least to greatest or
        greatest to least. This is so we are able to assign relative priorities to each element.
    
        poll() == remove the element with the highest priority.

        Question: How does the poll() know which item to pull?
            Answer: HEAP!

    1.2 What is a heap?
        A heap is a tree based data strucutre that satisfies the heap invariant 
        (also called the heap property.): If A is a parent node of B, then A is ordered with
        respect to B for all nodes A, B in the heap.

        max heap: tree/heap with larger numbers at the top, with descending order as you go down the tree.
        min heap: Has smallest numbers at the top, with increasing values as you go down the tree.


        WHAT DOES THIS MEAN:
        The value of the parent node is always greater to or equal to than the child node.
        (for max heaps, the opposite is true for min heaps.)
            if there is a violation, where the child is greater than the parent, the structure
            does NOT qualify as a heap.

        Binary heaps: A heap where each node has exactly two children.

        Why do we care about heaps?
            Heaps are the underlying Abstract Data Type for the priority queue data structure.
            This is true to the point that the terms often used interchangeably, although that
            practice is technically not correct.

    1.3 When and where is a priority queue/heap used?
        Used in certain implementation of Dijkstra's shortest path algorithm(?)
        Anytime you need to dynamically fetch the "next best" or the "next worst" element.
        Used in Huffman coding (which is often used for lossless data compression.)
        Best First Search (BFS) algorithms such as A* use priority queues to continuously
            grab the next most promising node.
        Used by minimum spanning tree (mst) algorithms