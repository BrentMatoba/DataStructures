What is a balanced binary search tree?
A balanced binary search tree is a self-balancing binary search tree.
This type of tree will adjust itself in order to maintain a low(logarithmic) height allowing for
faster operations such as insertion and deletion.

Time Complexity
Copmlexity of Binary search trees
Insert, Average:O(log(n)) Worst: O(n)
Delete, Average:O(log(n)) Worst: O(n)
Remove, Average:O(log(n)) Worst: O(n)
Search, Average:O(log(n)) Worst: O(n)

Time complexity of BALANCED binary search trees
Insert, Average: O(log(n)), Worst: O(log(n))
Delete, Average: O(log(n)), Worst: O(log(n))
Remove, Average: O(log(n)), Worst: O(log(n))
Search, Average: O(log(n)), Worst: O(log(n))

 Tree Rotations:
    The secret ingredient to most balanced binary search tree algorithms is the clever usage
    of a tree invariant and tree rotations.

    A treeinvariant is a property/rule you impose on your tree that it must meet after every operation.
    To ensure that the invariant is always satisfied a series of tree roations are normally applied.

    Q: WHy does this work? Why are you allowed to change the structure of a tree like this?
    Short answer: in the left tree we know that D < B < E < A < C and this remains true for the right
    subtree, so we didn't break the BST invariant, and therefore, this is a valid transformation

    Long answer: Recall taht all Balanced Binary search trees are binary search trees so that 
    the binary search tree invariant holds. This means that for eveyr node n, n.left < n and n < n.right

    Note: This assumes that we only have unique values, other we'd have to consider the case where n. left <= n and n <= right
    It does not matter what the structure of the tree looks; all we care about is that the binary search tree
    invariant holds. This means we can shuffle/transofrm/rotae the values and nodes in the tree as we please as ong as the BST invariant remians satisfied!