Singly and Doubly Linked Lists

Outline:
    1. Discussion about Singly and Doubly Linked Lists
        1.1 What is a linked list?
        1.2 Where are linked lists used?
        1.3 Terminology
        1.4 Singly Linked vs Doubly Linked
        1.5 Pros and Cons of Single and Double Linked Lists
    2. Implementation Details
        2.1 How to insert new elements
        2.2 How to remove elements
    3. Complexity analysis
    4. Code implementation


1. Discussion about Singly and Doubly Linked Lists
    1.1: What is a linked list?
        A linked list is a sequential list of nodes that hold data which point to other nodes also containing data
        node -> node -> node -> null
            *remember the last node always has a null pointer

    1.2 Where are linked lists used?
        a. Used in many lists, queue, and stack implementations.
        b. Great for creating circular lists
        c. Can easily model real world objects such as trains
        d. Used in separate chaining, which is present certain Hashtable implementations to 
        deal with hashing collisions
        e. OFten used in the implementation of adjacency lists for graphs.

    1.3 Terminology
        Head: The first node in a linked list
        Tail: The last node in a linked list
        Pointer: Reference to another node
        Node: An object containing data and pointers

    1.4 Singly Linked vs Doubly Linked lists
        Single linked lists only hold a reference to the next node. In the implementation you always maintain a reference
        to the head of the linked list, and a reference to the tail node for quick additions/removals.

        With a doubly linked list, each node holds a reference to the next and previus nodes. In the implementation you always
        maintain a reference to the head and the tail of the doubly linked list to do quick additions/removals from both
        ends of your list.

    1.5 Pros and Cons of Single and Double Linked Lists:
        Single:
            Pros:
                Uses less memory
                Simpler implementation
            Cons:
                cannot access previous elements without starting at head and iterating through
        Double:
            Pros:
                Can be traversed backwards.
                Can edit the Linked List in real time, patching the whole by linked the previous and next nodes.
            Cons:
                Takes 2x memory
                    On a 64 bit machine, references take 8 bytes. On a 32 bit machine, 4 bytes.
    
2.Implementation Details
    2.1 How to insert new elements:
        Single:
            head -> 5 -> 23 -> 7  -> 13 <- tail
            "Insert 11 where the node is."
            1. Create 11 node, turn the pointer to 7.
            2. Make 23's pointer 11.
                *If you do reverse order, you destroy the only pointer to 11, and have no way
                    to make 11's pointer 7.
    2.2 Inserting with Doubly Linked List
        Much trickier because of all the pointers flying around, but its the same concept.
        2 <-> 23 <-> 7 <-> 13
        Inserting 11.

        1. Iterate through with the runner until you're at the preceding node to insertion point, in this case, 23.
        2. make 11 point to 23 and 7.
        3. make 7's previous pointer 11.
        4. Make 23's next pointer 11
    
    2.3 Removing from Singly Linked list
        Head -> 7 -> 0 -> 4 -> 9 -> 15 <-tail
        1. Make TWO runners, one beginning at the head, and the second at the [1] index: 0
        2. Advance runner 2 until we find the node we want to remove, while also incrementing runner1.
        3. Create a temporary pointer for the element we want to remove (9) so that we can deallocate its memory later
        (this is for non garbage collecting languages)
        4. Increment runner 2 to element after removed item. (15)
        5. Make runner1's node's pointer to runner2 node.
        6. Delete removed node.

    2.4 Removing from Doubly Linked List   
        Actually easier
        Head -> 7 -> 0 -> 4 -> 9 -> 15 <-tail
        1. Only need 1 runner, iterate through until you find node you want.
        2. Set 4's next pointer to 15.
        3. Set 15's previous pointer to 4.
        4. 9 is ready to be removed.

    2.5 Linked List Complexity Analysis.
        Single Linked
            Search:O(n)
            Insert at head:O(1)
            Insert at tail:O(1)
        Double Linked
            Search:O(n)
            Insert at head:O(1)
            Insert at tail:O(1)
        
        So in terms of time complexity they're actually identical. I will probably default to doubly linked lists, then use singles
        if I need to. Memory is cheap!