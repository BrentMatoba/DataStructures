Data Structures: An Introduction
https://www.youtube.com/watch?v=RBSGKlAvoiM&t=82s

Contents:
1.What is a data structure?
2.Intro to Computational Complexity Analysis


1. What is a data structure?
A data structure (DS) is a way of organizing data so that it can be used effectively/effeciently.

Why data structures?
They are essential ingredients in creating fast and powerful algorithms. They help to manage and organize data.
They make code cleaner and easier to understand.
    Programmers who excel are ones that know how an when to use appropriate data structures.

Abstract Data Types:
    An abstract data type(ADT) is an abstraction of a data structure which provides only the interface to which a data structure
    must adhere to.
    The intereface does not give any specific details about how something should be implemented or in what programming language.

    A metaphor:
        Suppose the ADT is a mode of transportation, to get from point A to point B. There many forms available, like walking, or biking.
        These specific modes of transportation are analagous to the data structures themselves.

        Data structures are the concrete realizations of the abstract concepts defined by ADT's.

        Examples
        Abstraction:Implenmentation.
        List:Dynamic Array/Linked List
        Queue: LinkedList based queue/Array based Queue/Stack based queue
        Map: Tree map/HashMap/Hashtable
        Vehicle: GolfCart/Bicycle/Smart Car



2. Introduction to Computational Complexity Analysis.
    As Programmers, we often find ourselves asking t he same two questions over and over again:
    How much time does this algorithmn need to finish?

    How much space does this algorithm need for its computation?

    Big-0 Notation:
        Big-O notationg gives an upper bound of the complexity in the WORST case, helpnig to quantify performance as the input size becomes arbitrarily large.

        we're not really interested what happens when the input is small.

    n: The size of the input.
    Complexities organized smallest to largest
    Constant Time: O(1)
    Logarithmic Time: O(log(n))
    Linear Time: O(n)
    Linearithmic Time:O(nlog(n))
    Quadric Time: O(n^2)
    Cubic Time: O(n^3)
    Exponential Time: O(b^n), b>1
    Factorial Time: O(n!)


3. Big-O properties:
    We always remove constant values from Big-O computations because we are worried about whats happening as n approaches infinity.
    In the context of infinity, constants will always mean nothing. However, note this approach is from a theoretical/mathematical perspective.
    In real life, if your n is two billion or something, that will obviously have a notable effect on the running time on your program.

    O(n + c) = O(n)
    O(cn) = O(n), c>0

    Let f be a function that describes the running time of a part icular algorithmn for an input of size n.
    f(n) = 7log(n)^3 + 15n^2 + 2n^3 + 8
        O(f(n)) = O(n^3)
        This is because O(n^3) is the largest, most dominant rate of growth in this function.
    

4.Examples:
    Constant Time O(1):
    Meaning that they run the same no matter what the size of n is!
    a.
        a=1
        b=2
        c=a + 5*B

    b.
        i=0
        While i < 11:
            i = i+1

    
    Linear Time O(n):
    a.
        i = 0
        While i < n:
            i = i+1
        
        f(n) = n
        O(f(n)) = O(n)
    b. This is O(n) because /3 is dividing by a constant, which we erase.
        i = 0
        While i < n:
            i = i+3
            f(n) = n/3
            O(f(n)) = O(n)
