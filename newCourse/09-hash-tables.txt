Hash Tables
"one data strucure to rule them all"

Outline:
    What is a Hash Table? and what is a hash function?
    Properties of hash functions?
    Discussion on collision resolution methods, in particular:
        separate chaining and open addressing
    Complexity analysis.
    Separate chaining implementation details
        Linked list approach overview
        separate chaining FAQ's
        Separate chaining source code
    Separate chaining HT source code.


    Open addresssing techniques. implemnetation details
        Linear probing
            what is linear probing?
            chaos with cycles
            linear probing insertion Examples
            table resizing and updating values
        Quadratic probing   
            what is quadratic probing?
            problem siwth probing sequence cycles
            different ways to quadratically problem
            inserting/resize Examples
    
    Double Hashing
        Whatg is double hashing? How does it work?
        Chaos with cycles
        Constructin ga new hash function 
            Universal hash functions
        Inserting/resize example

        Removing elements
            Solution using tombstones
            Lazy deletion/relocation
            lots of Examples


What is a hash table?
     A hash table (HT) is a data strucutre that provides a mapping from keys to values using 
     a technique called hashing. (ALSO CALLED DICTIONARY)
     Key value pairs, keys must be unique, but values can be repeated.
     
     HTs are often used to track item frequencies. For instance, counting the number of times a 
     word appears in a given text.
    
    A hash function H(x) is a function that maps a key "x" to a whole number in a fixed range.
    

    We can also define hash functions for arbitray objects such as strings, lits, tuples,
    multi data objects, etc...

    for a string s let H(s) be a hash function defined below ehre ASCII(x) returns tot he ASCII value of the character x

    If H(x) == H(y) then objects x and y might be equal, but if H(x) != H(y), then x and y are certainly not equal./

    Q: How can weuse this to our advantage to speedup object comparisonS?
    A: This means that instead of comparing x and y directly, a smarter approach is to first compare their
    hash values, and only if the hash values match do we need to explicitly compare x and y.

Properties of Hash Functions:
    Consider the problem of trying to determine if two very large files have the same contents.
    If we precomputed H(fil1) and H(file2) first we should compare those hash values since comparing
    hash values is O(1)! If possible, we do not want to copen either of the fiels directly. comparing
    their  contents can be very slow, although we may have to if H(file1) == H(file2)

        *note: Hash functions for files are more sophisticated that those used for hashtables. instead
        for files we use what are called cyptographic hash functions also called checksums.