Hash Table Double Hashing
    Open Addressing main idea
    General insertion method for open addressing on a table of size N goes:
    x = 1
    keyHash = H1(k) mod nindex = keyHash
    
    while table[inx] != null
        index = (keyhash + P(k,x)) mod N
        x = x+1

    insert (k,v) at table[index]

    Where Hx(k) is the hash for the key k and P(k,x) is the probing function



What is double hashing?
    Double hashing is a probing method which probes according to a constant multiple ofanother hash
    fucntion, specifically:
    P(k,x) = x*H2(k) where H2(k) is a second hash function
    H2(k) must hash the same type of keys as H1(k)
        NOTE: Notice that doubling hashing reduces to linear probing (except that the constant is unknown until runtime)
    

Chaos with cycles 
    Since double hashing reduces to linear probing at runtime, we may end up with a linear probing function such as 
    P(x) =  3x, H1(k) = 4, and table size is N=9.
    In this case, we end up witht he following cycle occuring
    H(K) + P(0) mod N = 4
    H(K) + P(1) mod N = 7
    H(K) + P(2) mod N = 1
    H(K) + P(3) mod N = 4
    H(K) + P(4) mod N = 7
    H(K) + P(5) mod N = 1
    H(K) + P(6) mod N = 4
    H(K) + P(7) mod N = 7
    H(K) + P(8) mod N = 1


Chaos with cycles
    To fix the issue of cycles pick the table size to be a prime number and also compute the value of 

Constructing H2(k)'
    Suppose the k has type t

    Whenever we want to use double hashing as a collision resolution method we need to fabricate a new functionH2(k)
    that knowns how to hash  keys of type T.

    It would be nice to have a systematic way to be able to effectively produce a new hash function every time we need one.
    Luckily for us, the keys we need to hash are always composed of the same fundamental building blocks. IN particular: integers, strings, real numbers, fixed length vectors, etc...

    There are many well known high quality hash functions for these fundam;ental data types. Hence, we can use and combine them to construct our fucntion H2(k)
    Frequently, the hash functions selected toc ompose H2(k) are picked from a pool of hash functions called universal hash functions
    which generally operate on one fundamental data type.

Inserting with double hashing 
    Suppose we have an originally empty hash table anbd we want ot insert some (ki,vi) pairs iwth Double hashing and we selected our hash table to have
    Probing function: P(x) = x*H2(k)
    Table size: N=7 (A prime number)
    max load fact or: Alpha = 0.75
    threshold before resize = N * a = 5

Hash Table: Removing with double addressing
    Suppose we have an empty hash table and we're using linear probing with P(x) = x
    N=8

    Assume for the sake of argument that H(k1) = H(k2) = H(k3) = 1
        Hash collision
    For this example, we'll just use neaive removing where we just clear the bucket and explore why that doesn't work

    The value in the bucket at index 2 is null so we must conclude that the key k3 does not exist in the has htable otehrwise we
    would have foudn it before reaching the null position.
    However, the k3 variable exists with the hash table! Hence, the naive removing method doesn't work.

    The solution:
        The soultion is to place a unique marker called a tombstone intead of null to indicate that a (k,v) pair
        has been deleted and that the bucket shoudl be skipped during a search.
        Lets replace the deleted bucket with a tombstone as we shoudl ahve done and see what happens.
    
    TombStone Questions:
        Q: I have a lot of tombstones cluttering my hash table, how do i get rid of them?
        A: Tombstones count as filled slots in the Hash Table so they increase the load factor and will be removed
        when the table is resized. Additionally, when inserting a new (k,v) pair you can replace bucktes with tombstones
        with the new key-value pair. 